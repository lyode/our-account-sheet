import React, { useState } from 'react';
import { Plus, Minus, DollarSign, Calendar, Tag, Trash2, Home, TrendingUp, List, Settings, ArrowUp, ArrowDown } from 'lucide-react';

export default function MobileAccountingApp() {
  const [transactions, setTransactions] = useState([]);
  const [activeTab, setActiveTab] = useState('home');
  const [showAddForm, setShowAddForm] = useState(false);
  const [description, setDescription] = useState('');
  const [amount, setAmount] = useState('');
  const [category, setCategory] = useState('');
  const [type, setType] = useState('expense');

  const categories = [
    'Food & Dining', 'Transportation', 'Shopping', 'Entertainment',
    'Bills & Utilities', 'Healthcare', 'Education', 'Travel',
    'Salary', 'Business', 'Investment', 'Gift', 'Other'
  ];

  const addTransaction = () => {
    if (!description || !amount || !category) {
      alert('Please fill in all fields');
      return;
    }

    const newTransaction = {
      id: Date.now(),
      description,
      amount: parseFloat(amount),
      category,
      type,
      date: new Date().toLocaleDateString(),
      time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})
    };

    setTransactions([newTransaction, ...transactions]);
    setDescription('');
    setAmount('');
    setCategory('');
    setShowAddForm(false);
  };

  const deleteTransaction = (id) => {
    setTransactions(transactions.filter(t => t.id !== id));
  };

  const totalIncome = transactions
    .filter(t => t.type === 'income')
    .reduce((sum, t) => sum + t.amount, 0);

  const totalExpenses = transactions
    .filter(t => t.type === 'expense')
    .reduce((sum, t) => sum + t.amount, 0);

  const balance = totalIncome - totalExpenses;

  const recentTransactions = transactions.slice(0, 5);

  // Home Tab Component
  const HomeTab = () => (
    <div className="p-4 pb-20">
      {/* Balance Card */}
      <div className="bg-gradient-to-br from-blue-600 to-blue-800 rounded-2xl p-6 text-white mb-6 shadow-lg">
        <div className="flex justify-between items-start mb-4">
          <div>
            <p className="text-blue-100 text-sm">Total Balance</p>
            <h1 className="text-3xl font-bold">${balance.toFixed(2)}</h1>
          </div>
          <DollarSign className="w-8 h-8 text-blue-200" />
        </div>
        
        <div className="grid grid-cols-2 gap-4 mt-6">
          <div className="bg-white bg-opacity-20 rounded-xl p-3">
            <div className="flex items-center mb-1">
              <ArrowUp className="w-4 h-4 text-green-300 mr-1" />
              <span className="text-xs text-blue-100">Income</span>
            </div>
            <p className="text-lg font-semibold">${totalIncome.toFixed(2)}</p>
          </div>
          <div className="bg-white bg-opacity-20 rounded-xl p-3">
            <div className="flex items-center mb-1">
              <ArrowDown className="w-4 h-4 text-red-300 mr-1" />
              <span className="text-xs text-blue-100">Expenses</span>
            </div>
            <p className="text-lg font-semibold">${totalExpenses.toFixed(2)}</p>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="grid grid-cols-2 gap-3 mb-6">
        <button 
          onClick={() => {setType('income'); setShowAddForm(true);}}
          className="bg-green-500 text-white p-4 rounded-xl flex items-center justify-center space-x-2 shadow-md active:scale-95 transition-transform"
        >
          <Plus className="w-5 h-5" />
          <span className="font-medium">Add Income</span>
        </button>
        <button 
          onClick={() => {setType('expense'); setShowAddForm(true);}}
          className="bg-red-500 text-white p-4 rounded-xl flex items-center justify-center space-x-2 shadow-md active:scale-95 transition-transform"
        >
          <Minus className="w-5 h-5" />
          <span className="font-medium">Add Expense</span>
        </button>
      </div>

      {/* Recent Transactions */}
      <div className="bg-white rounded-2xl p-4 shadow-sm">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-lg font-semibold text-gray-800">Recent Activity</h2>
          <button 
            onClick={() => setActiveTab('transactions')}
            className="text-blue-600 text-sm font-medium"
          >
            View All
          </button>
        </div>
        
        {recentTransactions.length === 0 ? (
          <div className="text-center py-8 text-gray-400">
            <DollarSign className="w-12 h-12 mx-auto mb-3 opacity-30" />
            <p>No transactions yet</p>
            <p className="text-sm">Add your first transaction!</p>
          </div>
        ) : (
          <div className="space-y-3">
            {recentTransactions.map(transaction => (
              <div key={transaction.id} className="flex items-center justify-between py-2">
                <div className="flex items-center space-x-3">
                  <div className={`p-2 rounded-full ${transaction.type === 'income' ? 'bg-green-100' : 'bg-red-100'}`}>
                    {transaction.type === 'income' ? 
                      <ArrowUp className="w-4 h-4 text-green-600" /> : 
                      <ArrowDown className="w-4 h-4 text-red-600" />
                    }
                  </div>
                  <div>
                    <p className="font-medium text-gray-800 text-sm">{transaction.description}</p>
                    <p className="text-xs text-gray-500">{transaction.category}</p>
                  </div>
                </div>
                <div className="text-right">
                  <p className={`font-semibold ${transaction.type === 'income' ? 'text-green-600' : 'text-red-600'}`}>
                    {transaction.type === 'income' ? '+' : '-'}${transaction.amount.toFixed(2)}
                  </p>
                  <p className="text-xs text-gray-400">{transaction.time}</p>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );

  // Transactions Tab Component
  const TransactionsTab = () => (
    <div className="p-4 pb-20">
      <div className="bg-white rounded-2xl shadow-sm">
        <div className="p-4 border-b border-gray-100">
          <h2 className="text-lg font-semibold text-gray-800">All Transactions</h2>
          <p className="text-sm text-gray-500">{transactions.length} total transactions</p>
        </div>
        
        {transactions.length === 0 ? (
          <div className="text-center py-12 text-gray-400">
            <List className="w-16 h-16 mx-auto mb-4 opacity-30" />
            <p className="text-lg mb-2">No transactions yet</p>
            <p className="text-sm">Start by adding your first transaction</p>
          </div>
        ) : (
          <div className="divide-y divide-gray-100">
            {transactions.map(transaction => (
              <div key={transaction.id} className="p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3 flex-1">
                    <div className={`p-2 rounded-full ${transaction.type === 'income' ? 'bg-green-100' : 'bg-red-100'}`}>
                      {transaction.type === 'income' ? 
                        <ArrowUp className="w-4 h-4 text-green-600" /> : 
                        <ArrowDown className="w-4 h-4 text-red-600" />
                      }
                    </div>
                    <div className="flex-1">
                      <p className="font-medium text-gray-800">{transaction.description}</p>
                      <div className="flex items-center text-xs text-gray-500 mt-1">
                        <Tag className="w-3 h-3 mr-1" />
                        <span className="mr-3">{transaction.category}</span>
                        <Calendar className="w-3 h-3 mr-1" />
                        <span>{transaction.date}</span>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="text-right">
                      <p className={`font-semibold ${transaction.type === 'income' ? 'text-green-600' : 'text-red-600'}`}>
                        {transaction.type === 'income' ? '+' : '-'}${transaction.amount.toFixed(2)}
                      </p>
                    </div>
                    <button
                      onClick={() => deleteTransaction(transaction.id)}
                      className="text-red-400 hover:text-red-600 p-1 rounded active:scale-95 transition-all"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );

  // Stats Tab Component
  const StatsTab = () => {
    const incomeTransactions = transactions.filter(t => t.type === 'income');
    const expenseTransactions = transactions.filter(t => t.type === 'expense');
    
    return (
      <div className="p-4 pb-20">
        <div className="grid grid-cols-1 gap-4">
          {/* Overview Cards */}
          <div className="bg-white rounded-2xl p-6 shadow-sm">
            <h2 className="text-lg font-semibold text-gray-800 mb-4">Financial Overview</h2>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Total Income</span>
                <span className="text-green-600 font-semibold text-lg">${totalIncome.toFixed(2)}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Total Expenses</span>
                <span className="text-red-600 font-semibold text-lg">${totalExpenses.toFixed(2)}</span>
              </div>
              <div className="border-t pt-4">
                <div className="flex justify-between items-center">
                  <span className="text-gray-800 font-medium">Net Balance</span>
                  <span className={`font-bold text-xl ${balance >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                    ${balance.toFixed(2)}
                  </span>
                </div>
              </div>
            </div>
          </div>

          {/* Transaction Counts */}
          <div className="bg-white rounded-2xl p-6 shadow-sm">
            <h2 className="text-lg font-semibold text-gray-800 mb-4">Transaction Summary</h2>
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center">
                <p className="text-2xl font-bold text-green-600">{incomeTransactions.length}</p>
                <p className="text-sm text-gray-500">Income Entries</p>
              </div>
              <div className="text-center">
                <p className="text-2xl font-bold text-red-600">{expenseTransactions.length}</p>
                <p className="text-sm text-gray-500">Expense Entries</p>
              </div>
            </div>
          </div>

          {/* Average Transaction */}
          {transactions.length > 0 && (
            <div className="bg-white rounded-2xl p-6 shadow-sm">
              <h2 className="text-lg font-semibold text-gray-800 mb-4">Averages</h2>
              <div className="grid grid-cols-2 gap-4">
                {incomeTransactions.length > 0 && (
                  <div className="text-center">
                    <p className="text-xl font-bold text-green-600">
                      ${(totalIncome / incomeTransactions.length).toFixed(2)}
                    </p>
                    <p className="text-sm text-gray-500">Avg Income</p>
                  </div>
                )}
                {expenseTransactions.length > 0 && (
                  <div className="text-center">
                    <p className="text-xl font-bold text-red-600">
                      ${(totalExpenses / expenseTransactions.length).toFixed(2)}
                    </p>
                    <p className="text-sm text-gray-500">Avg Expense</p>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="max-w-md mx-auto bg-gray-50 min-h-screen relative">
      {/* Status Bar Simulation */}
      <div className="bg-gray-900 text-white text-xs p-2 flex justify-between items-center">
        <span>9:41</span>
        <span>Accounting App</span>
        <span>100%</span>
      </div>

      {/* Main Content */}
      <div className="relative">
        {activeTab === 'home' && <HomeTab />}
        {activeTab === 'transactions' && <TransactionsTab />}
        {activeTab === 'stats' && <StatsTab />}
      </div>

      {/* Bottom Navigation */}
      <div className="fixed bottom-0 left-1/2 transform -translate-x-1/2 w-full max-w-md bg-white border-t border-gray-200 px-4 py-2">
        <div className="flex justify-around">
          {[
            { id: 'home', icon: Home, label: 'Home' },
            { id: 'transactions', icon: List, label: 'History' },
            { id: 'stats', icon: TrendingUp, label: 'Stats' }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex flex-col items-center py-2 px-3 rounded-lg transition-colors ${
                activeTab === tab.id 
                  ? 'text-blue-600 bg-blue-50' 
                  : 'text-gray-400 hover:text-gray-600'
              }`}
            >
              <tab.icon className="w-5 h-5 mb-1" />
              <span className="text-xs font-medium">{tab.label}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Add Transaction Modal */}
      {showAddForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-end">
          <div className="bg-white w-full rounded-t-3xl p-6 transform transition-transform">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-semibold">Add {type === 'income' ? 'Income' : 'Expense'}</h2>
              <button 
                onClick={() => setShowAddForm(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ✕
              </button>
            </div>

            <div className="space-y-4">
              {/* Type Toggle */}
              <div className="flex bg-gray-100 rounded-xl p-1">
                <button
                  onClick={() => setType('expense')}
                  className={`flex-1 py-2 px-4 rounded-lg font-medium transition-colors ${
                    type === 'expense' ? 'bg-white text-gray-800 shadow-sm' : 'text-gray-500'
                  }`}
                >
                  Expense
                </button>
                <button
                  onClick={() => setType('income')}
                  className={`flex-1 py-2 px-4 rounded-lg font-medium transition-colors ${
                    type === 'income' ? 'bg-white text-gray-800 shadow-sm' : 'text-gray-500'
                  }`}
                >
                  Income
                </button>
              </div>

              {/* Amount Input */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Amount</label>
                <div className="relative">
                  <span className="absolute left-3 top-3 text-gray-400">$</span>
                  <input
                    type="number"
                    step="0.01"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    placeholder="0.00"
                    className="w-full pl-8 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-lg"
                  />
                </div>
              </div>

              {/* Description Input */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                <input
                  type="text"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="Enter description"
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              {/* Category Select */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Category</label>
                <select
                  value={category}
                  onChange={(e) => setCategory(e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">Select category</option>
                  {categories.map(cat => (
                    <option key={cat} value={cat}>{cat}</option>
                  ))}
                </select>
              </div>

              {/* Action Buttons */}
              <div className="flex space-x-3 pt-4">
                <button
                  onClick={() => setShowAddForm(false)}
                  className="flex-1 py-3 px-4 border border-gray-300 text-gray-700 rounded-xl font-medium active:scale-95 transition-transform"
                >
                  Cancel
                </button>
                <button
                  onClick={addTransaction}
                  className={`flex-1 py-3 px-4 text-white rounded-xl font-medium active:scale-95 transition-transform ${
                    type === 'income' ? 'bg-green-500 hover:bg-green-600' : 'bg-red-500 hover:bg-red-600'
                  }`}
                >
                  Add {type === 'income' ? 'Income' : 'Expense'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
